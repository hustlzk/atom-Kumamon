var CompositeDisposable, AtomKumamon, KumamonView;
var $ = require('jquery');

KumamonView = require('./miku-view');

CompositeDisposable = require('atom').CompositeDisposable;

module.exports = AtomKumamon = {
    KumamonView: null,
    elem: null,
    toggle: null,
    typing: null,
    subscriptions: null,
    disposableEditor: null,
    activate: function(state) {
        var that = this;
        this.KumamonView = new KumamonView(state.KumamonViewState);
        this.elem = this.KumamonView.getElement();
        console.log(this.elem);
        document.querySelector('.workspace').appendChild(this.elem);
        this.KumamonView.initEventBind();
        this.KumamonView.kumamon = window.frames[this.KumamonView.iframeName];
        this.subscriptions = new CompositeDisposable();
        var editor = atom.workspace.getActiveTextEditor();
        var warning = document.getElementsByClassName('warning');
        var error = document.getElementsByClassName('error');

        /*
        * 注册atom事件
        * toggle 事件暂存在this.subscriptions
        * textChange事件单独存
        * */
        this.subscriptions.add(atom.commands.add('atom-workspace', {
            'AtomKumamon:toggle': ( function(_this) {
                return function() {
                    return _this.toggle();
                };
            } )(this)
        }));
        /*
        * 插件激活时监听当前
        * */
        this.typing = editor.onDidChange(function() {
            that.KumamonView.addFrame(15.0);
              console.log(warning.length + error.length);
            warning = document.getElementsByClassName('warning');
            error = document.getElementsByClassName('error');
            that.KumamonView.bugappear(warning.length + error.length);
            // console.log(warning.length + error.length);
        });

        /*
        * 切换时
        * */
        this.subscriptions.add(atom.workspace.onDidChangeActivePaneItem(function(item){
            if(item && item.constructor && item.constructor.name && item.constructor.name == 'TextEditor'){
                /*
                * 同一时间只有一个editor注册change事件
                * */
                that.typing.dispose();
                that.typing = null;
                that.typing = item.onDidChange(function() {
                    that.KumamonView.addFrame(15);

                    error = document.getElementsByClassName('error');
                    warning = document.getElementsByClassName('warning');
                    that.KumamonView.bugappear(warning.length + error.length);
                     console.log(warning.length + error.length);
                });
            }
          }));
    },
    deactivate: function() {
        this.subscriptions.dispose();
        this.typing.dispose();
        $(this.elem).html('');
    },
    serialize: function() {
        return {
            KumamonViewState: this.KumamonView.serialize()
        };
    },
    toggle: function() {
         if (this.elem.style.display == 'block') {
             this.KumamonView.pause();
             this.elem.style.display = 'none';
         } else {
             this.KumamonView.play();
             this.elem.style.display = 'block';
         }
    }
};
// ---
// generated by coffee-script 1.9.2
